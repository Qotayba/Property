// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Property.Infrastructure.DbContexts;

#nullable disable

namespace Property.Infrastructure.Migrations
{
    [DbContext(typeof(PropertyContext))]
    partial class PropertyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Property.Domain.Entities.AppartmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HaveAnElevator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Appartments");
                });

            modelBuilder.Entity("Property.Domain.Entities.ChaletEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HaveJacuzzi")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HavePond")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PondEndHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PondLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PondStartHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PondWidth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Chalets");
                });

            modelBuilder.Entity("Property.Domain.Entities.PropertyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ForWhat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayMethod")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalArea")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Area")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ForStudentRent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("hasBathroom")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomReservationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomReservationEntity");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomReservationPaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountOfPayment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PayMethod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomReservationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomReservationId");

                    b.ToTable("RoomReservationPaymentEntity");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomSuppliesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplyStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SupplyId");

                    b.ToTable("RoomSuppliesEntity");
                });

            modelBuilder.Entity("Property.Domain.Entities.SupplyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupplyEntity");
                });

            modelBuilder.Entity("Property.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Property.Domain.Entities.AppartmentEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.PropertyEntity", "Property")
                        .WithOne("Appartment")
                        .HasForeignKey("Property.Domain.Entities.AppartmentEntity", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Property.Domain.Entities.ChaletEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.PropertyEntity", "Property")
                        .WithOne("Chalet")
                        .HasForeignKey("Property.Domain.Entities.ChaletEntity", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Property.Domain.Entities.PropertyEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.UserEntity", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.PropertyEntity", "Property")
                        .WithMany("Rooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomReservationEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.RoomEntity", "Room")
                        .WithMany("RoomReservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Property.Domain.Entities.UserEntity", "User")
                        .WithMany("RoomReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomReservationPaymentEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.RoomReservationEntity", "RoomReservation")
                        .WithMany("RoomReservationPayments")
                        .HasForeignKey("RoomReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomReservation");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomSuppliesEntity", b =>
                {
                    b.HasOne("Property.Domain.Entities.RoomEntity", "Room")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Property.Domain.Entities.SupplyEntity", "Supply")
                        .WithMany("Rooms")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("Property.Domain.Entities.PropertyEntity", b =>
                {
                    b.Navigation("Appartment")
                        .IsRequired();

                    b.Navigation("Chalet")
                        .IsRequired();

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomEntity", b =>
                {
                    b.Navigation("RoomReservations");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Property.Domain.Entities.RoomReservationEntity", b =>
                {
                    b.Navigation("RoomReservationPayments");
                });

            modelBuilder.Entity("Property.Domain.Entities.SupplyEntity", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Property.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("RoomReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
